AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Flask Portfolio - AWS SAM template (Serverless option B)

Globals:
  Function:
    Runtime: python3.11
    Timeout: 60
    MemorySize: 512
    Tracing: PassThrough
Conditions:
  HasSender: !Not [!Equals [!Ref ContactSenderParam, ""]]
  HasSesRegion: !Not [!Equals [!Ref SesRegionParam, ""]]

Parameters:
  SecretKeyParam:
    Type: String
    NoEcho: true
    MinLength: 32
    Description: Flask SECRET_KEY environment variable (required; set to a strong random value).
  ContactRecipientParam:
    Type: String
    Default: ''
    Description: Email address that should receive contact form messages (must be SES-verified if SES is in sandbox).
  ContactSenderParam:
    Type: String
    Default: ''
    Description: Verified SES identity to send from (defaults to ContactRecipientParam if left blank).
  SesRegionParam:
    Type: String
    Default: ''
    Description: Optional SES region override (leave blank to use Lambda region).

Resources:
  FlaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: app.lambda_handler
      Description: Flask serverless function for the portfolio site.
      Environment:
        Variables:
          SECRET_KEY: !Ref SecretKeyParam
          CONTACT_RECIPIENT: !Ref ContactRecipientParam
          CONTACT_SENDER: !If [HasSender, !Ref ContactSenderParam, !Ref ContactRecipientParam]
          SES_REGION: !If [HasSesRegion, !Ref SesRegionParam, '']
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - ses:SendEmail
              - ses:SendRawEmail
            Resource: "*"
      Events:
        Root:
          Type: HttpApi
          Properties:
            Path: /
            Method: ANY
        Proxy:
          Type: HttpApi
          Properties:
            Path: /{proxy+}
            Method: ANY

  FlaskFunctionUrl:
    Type: AWS::Lambda::Url
    Properties:
      TargetFunctionArn: !Ref FlaskFunction
      AuthType: NONE
      Cors:
        AllowOrigins:
          - '*'
        AllowMethods:
          - GET
          - POST

  FlaskFunctionUrlPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref FlaskFunction
      Action: lambda:InvokeFunctionUrl
      Principal: '*'
      FunctionUrlAuthType: NONE


  RootCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: jeffrey-smith-dev.com
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: jeffrey-smith-dev.com
          HostedZoneId: Z09052411SYRKYXWBGQQD

  RootCustomDomain:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: jeffrey-smith-dev.com
      DomainNameConfigurations:
        - CertificateArn: !Ref RootCertificate
          EndpointType: REGIONAL
          SecurityPolicy: TLS_1_2

  RootApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      ApiId: !Ref ServerlessHttpApi
      DomainName: !Ref RootCustomDomain
      Stage: '$default'

  RootDomainAliasA:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: Z09052411SYRKYXWBGQQD
      Name: jeffrey-smith-dev.com.
      Type: A
      AliasTarget:
        DNSName: !GetAtt RootCustomDomain.RegionalDomainName
        HostedZoneId: !GetAtt RootCustomDomain.RegionalHostedZoneId

  RootDomainAliasAAAA:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: Z09052411SYRKYXWBGQQD
      Name: jeffrey-smith-dev.com.
      Type: AAAA
      AliasTarget:
        DNSName: !GetAtt RootCustomDomain.RegionalDomainName
        HostedZoneId: !GetAtt RootCustomDomain.RegionalHostedZoneId

Outputs:
  FunctionName:
    Description: Name of the Lambda function
    Value: !Ref FlaskFunction
  FunctionArn:
    Description: ARN of the Lambda function
    Value: !GetAtt FlaskFunction.Arn
  FunctionUrl:
    Description: Public Function URL (Auth NONE)
    Value: !GetAtt FlaskFunctionUrl.FunctionUrl
  HttpApiUrl:
    Description: Base URL for the HttpApi managed by SAM
    Value: !Sub 'https://${ServerlessHttpApi}.execute-api.${AWS::Region}.amazonaws.com/'
